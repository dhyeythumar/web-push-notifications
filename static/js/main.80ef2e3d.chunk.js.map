{"version":3,"sources":["utils.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","registerServiceWorker","a","state","registered_SW","pushSubscriptionExists","convertedVapidKey","navigator","alert","serviceWorker","register","console","log","pushManager","unregister","getSubscription","process","pushReqToServer","subscription","fetch","method","body","JSON","stringify","headers","App","subscribeUser","subscribe","applicationServerKey","userVisibleOnly","newSubscription","setState","Notification","permission","unRegisterSW","location","reload","this","className","src","logo","alt","type","onClick","disabled","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ef2e3d.chunk.js","sourcesContent":["const urlBase64ToUint8Array = (base64String) => {\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n    // eslint-disable-next-line\n    const base64 = (base64String + padding)\n        .replace(/-/g, \"+\")\n        .replace(/_/g, \"/\");\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n\nconst registerServiceWorker = async () => {\n    const state = {\n        registered_SW: null,\n        pushSubscriptionExists: false,\n        convertedVapidKey: null,\n    };\n\n    if (!(\"serviceWorker\" in navigator)) {\n        alert(\"Service worker not present on navigator object!\");\n        return state;\n    }\n\n    // register SW\n    state.registered_SW = await navigator.serviceWorker.register(\n        \"/push-notification-SW.js\"\n    );\n    console.log(\"Successfully registered service worker.\");\n\n    if (!state.registered_SW.pushManager) {\n        alert(\n            \"Push Manager unavailable on service worker, so unregistering servive wroker!\"\n        );\n        state.registered_SW.unregister();\n        state.registered_SW = null;\n        return state;\n    }\n\n    // check for existing registered_SW\n    const existingSubscription =\n        await state.registered_SW.pushManager.getSubscription();\n    if (existingSubscription !== null) {\n        alert(\"Existing subscription detected.\");\n        state.pushSubscriptionExists = true;\n    }\n\n    state.convertedVapidKey = urlBase64ToUint8Array(\n        process.env.REACT_APP_PUBLIC_VAPID_KEY\n    );\n\n    return state;\n};\n\n// sent push notification request to server (Push Notification Server)\nconst pushReqToServer = (subscription) => {\n    return fetch(`${process.env.REACT_APP_SERVER_URL}/subscribe`, {\n        method: \"POST\",\n        body: JSON.stringify({\n            subscription: subscription,\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n    });\n};\n\nexport { urlBase64ToUint8Array, registerServiceWorker, pushReqToServer };\n","export default __webpack_public_path__ + \"static/media/logo.42627872.svg\";","import { Component } from \"react\";\n\nimport { registerServiceWorker, pushReqToServer } from \"./utils\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        registered_SW: null,\n        pushSubscriptionExists: false,\n        convertedVapidKey: null,\n    };\n\n    async componentDidMount() {\n        const state = await registerServiceWorker();\n        this.setState({\n            registered_SW: state.registered_SW,\n            pushSubscriptionExists: state.pushSubscriptionExists,\n            convertedVapidKey: state.convertedVapidKey,\n        });\n    }\n\n    subscribeUser = async () => {\n        if (this.state.pushSubscriptionExists || !this.state.registered_SW)\n            return;\n\n        try {\n            console.log(\"No subscription found, adding new subscription!\");\n            const newSubscription =\n                await this.state.registered_SW.pushManager.subscribe({\n                    applicationServerKey: this.state.convertedVapidKey,\n                    userVisibleOnly: true,\n                });\n            pushReqToServer(newSubscription);\n            this.setState({ pushSubscriptionExists: true });\n        } catch (err) {\n            if (Notification.permission !== \"granted\") {\n                alert(\"Notification permission was not granted!\");\n            } else {\n                alert(\"Error ocurred while subscribing :: \", err);\n            }\n        }\n    };\n\n    unRegisterSW = async () => {\n        if (this.state.registered_SW) {\n            this.state.registered_SW.unregister();\n            console.log(\n                \"Server worker successfully unregistered now you won't receive any new push notifications!\"\n            );\n            // this.setState({\n            //     registered_SW: null,\n            //     pushSubscriptionExists: false,\n            // });\n            window.location.reload();\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className=\"buttons\">\n                        <button\n                            type=\"button\"\n                            onClick={this.subscribeUser}\n                            className=\"subscribe-button\"\n                            disabled={\n                                this.state.pushSubscriptionExists ||\n                                !this.state.registered_SW\n                                    ? true\n                                    : false\n                            }\n                        >\n                            Subscribe to push notifications\n                        </button>\n                        <button\n                            type=\"button\"\n                            onClick={this.unRegisterSW}\n                            className=\"unregister-button\"\n                            disabled={this.state.registered_SW ? false : true}\n                        >\n                            Unregister service worker\n                        </button>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}