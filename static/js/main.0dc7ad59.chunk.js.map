{"version":3,"sources":["utils.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","registerServiceWorker","a","state","registered_SW","existingSubscription","convertedVapidKey","process","navigator","serviceWorker","register","scope","console","log","pushManager","alert","unregister","getExistingSubscription","getSubscription","pushReqToServer","subscription","fetch","method","headers","body","JSON","stringify","ownerId","res","json","parsedData","status","App","isNotificationAllowed","registerSW","setState","unregisterSW","subscribeUser","subscribe","applicationServerKey","userVisibleOnly","newSubscription","unsubscribe","unsubscribeUser","ServiceWorkerRegistration","prototype","Notification","permission","requestPermission","permissionState","this","main","className","type","onClick","disabled","src","logo","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc7ad59.chunk.js","sourcesContent":["const urlBase64ToUint8Array = (base64String) => {\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n    // eslint-disable-next-line\n    const base64 = (base64String + padding)\n        .replace(/-/g, \"+\")\n        .replace(/_/g, \"/\");\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n\nconst registerServiceWorker = async () => {\n    const state = {\n        registered_SW: null,\n        existingSubscription: null,\n        convertedVapidKey: urlBase64ToUint8Array(\n            process.env.REACT_APP_PUBLIC_VAPID_KEY\n        ),\n    };\n\n    //* register SW\n    state.registered_SW = await navigator.serviceWorker.register(\n        \"/web-push-notifications/push-notification-SW.js\",\n        {\n            scope: \"/web-push-notifications/\",\n        }\n    );\n    console.log(`Successfully registered service worker.`);\n\n    if (!state.registered_SW.pushManager) {\n        alert(\n            \"Push Manager unavailable on service worker, so unregistering servive wroker!\"\n        );\n        state.registered_SW.unregister();\n        state.registered_SW = null;\n        return state;\n    }\n\n    state.existingSubscription = await getExistingSubscription(\n        state.registered_SW\n    );\n    return state;\n};\n\n//* get for existing Subscription\nconst getExistingSubscription = async (registered_SW) => {\n    const existingSubscription =\n        await registered_SW.pushManager.getSubscription();\n    if (existingSubscription !== null) alert(\"Existing subscription detected.\");\n    return existingSubscription;\n};\n\n//* sent push notification request to server (Push Notification Server)\nconst pushReqToServer = async (subscription) => {\n    try {\n        const res = await fetch(\n            `${process.env.REACT_APP_SERVER_URL}/subscribe`,\n            {\n                method: \"POST\",\n                // mode: \"no-cors\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    subscription: subscription,\n                    ownerId: process.env.REACT_APP_OWNER_ID,\n                }),\n            }\n        );\n        const parsedData = await res.json();\n        console.log(parsedData);\n        //! 202 status code is received when request is sent from local host..\n        //!     this means that request is accepted but not acted upon\n        if (res.status === 200 || res.status === 202) return true;\n        return false;\n    } catch (err) {\n        console.log(err);\n        return false;\n    }\n};\n\nexport {\n    urlBase64ToUint8Array,\n    registerServiceWorker,\n    getExistingSubscription,\n    pushReqToServer,\n};\n","export default __webpack_public_path__ + \"static/media/logo.42627872.svg\";","import { Component } from \"react\";\n\nimport {\n    registerServiceWorker,\n    getExistingSubscription,\n    pushReqToServer,\n} from \"./utils\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        isNotificationAllowed: false,\n        registered_SW: null,\n        subscription: null,\n        convertedVapidKey: null,\n    };\n\n    async componentDidMount() {\n        // Are Notifications supported in the service worker?\n        if (!(\"showNotification\" in ServiceWorkerRegistration.prototype)) {\n            alert(\"Notifications aren't supported!\");\n            return;\n        }\n        if (!(\"serviceWorker\" in navigator)) {\n            alert(\"ServiceWorker not present on navigator object!\");\n            return;\n        }\n        // Check if push messaging is supported\n        if (!(\"PushManager\" in window)) {\n            alert(\"Push messaging isn't supported!\");\n            return;\n        }\n        // Check the current Notification permission.\n        // If its denied, it's a permanent block until the\n        // user changes the permission\n        console.log(\"Notification.permission :: \", Notification.permission);\n        if (Notification.permission === \"default\") {\n            const permissionState = await Notification.requestPermission();\n            console.log(permissionState);\n            this.setState({\n                isNotificationAllowed:\n                    permissionState === \"granted\" ||\n                    permissionState === \"default\"\n                        ? true\n                        : false,\n            });\n            if (permissionState === \"denied\") {\n                alert(\"Notification permission denied!\");\n                return;\n            }\n        } else if (Notification.permission === \"denied\") {\n            alert(\"Notification permission denied!\");\n            return;\n        } else {\n            //* Notification permission can be in \"granted\" || \"default\" state\n            this.setState({\n                isNotificationAllowed: true,\n            });\n        }\n\n        await this.registerSW();\n    }\n\n    registerSW = async () => {\n        if (this.state.registered_SW) return;\n\n        const state = await registerServiceWorker();\n        this.setState({\n            registered_SW: state.registered_SW,\n            subscription: state.existingSubscription,\n            convertedVapidKey: state.convertedVapidKey,\n        });\n    };\n\n    unregisterSW = async () => {\n        if (this.state.registered_SW) {\n            await this.state.registered_SW.unregister();\n            this.setState({\n                registered_SW: null,\n                subscription: null,\n            });\n            console.log(\n                `Server worker successfully unregistered now you won't receive any new push notifications!`\n            );\n        }\n    };\n\n    subscribeUser = async () => {\n        if (this.state.subscription || !this.state.registered_SW) return;\n\n        const existingSubscription = await getExistingSubscription(\n            this.state.registered_SW\n        );\n        if (existingSubscription)\n            return this.setState({\n                subscription: existingSubscription,\n            });\n\n        try {\n            console.log(`No subscription found, adding new subscription!`);\n            console.log(\n                \"process.env.REACT_APP_PUBLIC_VAPID_KEY :: \",\n                process.env.REACT_APP_PUBLIC_VAPID_KEY\n            );\n            console.log(\n                \"this.state.convertedVapidKey :: \",\n                this.state.convertedVapidKey\n            );\n            console.log(\n                \"process.env.REACT_APP_SERVER_URL :: \",\n                process.env.REACT_APP_SERVER_URL\n            );\n            console.log(\n                \"process.env.REACT_APP_OWNER_ID :: \",\n                process.env.REACT_APP_OWNER_ID\n            );\n            const newSubscription =\n                await this.state.registered_SW.pushManager.subscribe({\n                    applicationServerKey: this.state.convertedVapidKey,\n                    userVisibleOnly: true,\n                });\n\n            const res = await pushReqToServer(newSubscription);\n            if (res === true) this.setState({ subscription: newSubscription });\n            else await newSubscription.unsubscribe();\n        } catch (err) {\n            alert(`[Error ocurred while subscribing] \\n${err}`);\n        }\n    };\n\n    unsubscribeUser = async () => {\n        if (this.state.subscription) {\n            this.state.subscription.unsubscribe();\n            this.setState({\n                subscription: null,\n            });\n            console.log(\n                `Successfully unsubscribed now you won't receive any new push notifications!`\n            );\n        }\n    };\n\n    render() {\n        let main = (\n            <div>\n                <div className=\"button-container\">\n                    <button\n                        type=\"button\"\n                        onClick={this.registerSW}\n                        className=\"register-button\"\n                        disabled={this.state.registered_SW ? true : false}\n                    >\n                        Register service worker\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={this.unregisterSW}\n                        className=\"unregister-button\"\n                        disabled={this.state.registered_SW ? false : true}\n                    >\n                        UnRegister service worker\n                    </button>\n                </div>\n                <div className=\"button-container\">\n                    <button\n                        type=\"button\"\n                        onClick={this.subscribeUser}\n                        className=\"subscribe-button\"\n                        disabled={\n                            this.state.subscription || !this.state.registered_SW\n                                ? true\n                                : false\n                        }\n                    >\n                        Subscribe to push notifications\n                    </button>\n                    <button\n                        type=\"button\"\n                        onClick={this.unsubscribeUser}\n                        className=\"unsubscribe-button\"\n                        disabled={this.state.subscription ? false : true}\n                    >\n                        UnSubscribe to push notifications\n                    </button>\n                </div>\n            </div>\n        );\n\n        if (!this.state.isNotificationAllowed)\n            main = (\n                <div className=\"notification_not_allowed\">\n                    Notification is disabled for this website!\n                    <br />\n                    Allow the notifications & refresh the page.\n                </div>\n            );\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    {main}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}