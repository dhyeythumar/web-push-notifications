{"version":3,"sources":["utils.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","registerServiceWorker","a","state","registered_SW","existingSubscription","convertedVapidKey","process","navigator","alert","serviceWorker","register","scope","console","log","pushManager","unregister","getExistingSubscription","getSubscription","pushReqToServer","subscription","fetch","method","headers","body","JSON","stringify","ownerId","res","json","parsedData","status","App","registerSW","setState","unregisterSW","subscribeUser","subscribe","applicationServerKey","userVisibleOnly","newSubscription","unsubscribe","Notification","permission","unsubscribeUser","this","className","src","logo","alt","type","onClick","disabled","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c1e1a39.chunk.js","sourcesContent":["const urlBase64ToUint8Array = (base64String) => {\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n    // eslint-disable-next-line\n    const base64 = (base64String + padding)\n        .replace(/-/g, \"+\")\n        .replace(/_/g, \"/\");\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n};\n\nconst registerServiceWorker = async () => {\n    const state = {\n        registered_SW: null,\n        existingSubscription: null,\n        convertedVapidKey: urlBase64ToUint8Array(\n            process.env.REACT_APP_PUBLIC_VAPID_KEY\n        ),\n    };\n\n    if (!(\"serviceWorker\" in navigator)) {\n        alert(\"ServiceWorker not present on navigator object!\");\n        return state;\n    }\n\n    //* register SW\n    state.registered_SW = await navigator.serviceWorker.register(\n        \"/web-push-notifications/push-notification-SW.js\",\n        {\n            scope: \"/web-push-notifications/\",\n        }\n    );\n    console.log(`Successfully registered service worker.`);\n\n    if (!state.registered_SW.pushManager) {\n        alert(\n            \"Push Manager unavailable on service worker, so unregistering servive wroker!\"\n        );\n        state.registered_SW.unregister();\n        state.registered_SW = null;\n        return state;\n    }\n\n    state.existingSubscription = await getExistingSubscription(\n        state.registered_SW\n    );\n    return state;\n};\n\n//* get for existing Subscription\nconst getExistingSubscription = async (registered_SW) => {\n    const existingSubscription =\n        await registered_SW.pushManager.getSubscription();\n    if (existingSubscription !== null) alert(\"Existing subscription detected.\");\n    return existingSubscription;\n};\n\n//* sent push notification request to server (Push Notification Server)\nconst pushReqToServer = async (subscription) => {\n    try {\n        const res = await fetch(\n            \"https://web-push-notifications-server.p.rapidapi.com/subscribe\",\n            {\n                method: \"POST\",\n                // mode: \"no-cors\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-rapidapi-host\":\n                        \"web-push-notifications-server.p.rapidapi.com\",\n                    \"x-rapidapi-key\": process.env.REACT_APP_X_RAPIDAPI_KEY,\n                },\n                body: JSON.stringify({\n                    subscription: subscription,\n                    ownerId: process.env.REACT_APP_OWNER_ID,\n                }),\n            }\n        );\n        const parsedData = await res.json();\n        console.log(parsedData);\n        //! 202 status code is received when request is sent from local host..\n        //!     this means that request is accepted but not acted upon\n        if (res.status === 200) return true;\n        return false;\n    } catch (err) {\n        console.log(err);\n        return false;\n    }\n};\n\nexport {\n    urlBase64ToUint8Array,\n    registerServiceWorker,\n    getExistingSubscription,\n    pushReqToServer,\n};\n","export default __webpack_public_path__ + \"static/media/logo.42627872.svg\";","import { Component } from \"react\";\n\nimport {\n    registerServiceWorker,\n    getExistingSubscription,\n    pushReqToServer,\n} from \"./utils\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        registered_SW: null,\n        subscription: null,\n        convertedVapidKey: null,\n    };\n\n    async componentDidMount() {\n        await this.registerSW();\n    }\n\n    registerSW = async () => {\n        if (this.state.registered_SW) return;\n\n        const state = await registerServiceWorker();\n        this.setState({\n            registered_SW: state.registered_SW,\n            subscription: state.existingSubscription,\n            convertedVapidKey: state.convertedVapidKey,\n        });\n    };\n\n    unregisterSW = async () => {\n        if (this.state.registered_SW) {\n            await this.state.registered_SW.unregister();\n            this.setState({\n                registered_SW: null,\n                subscription: null,\n            });\n            console.log(\n                `Server worker successfully unregistered now you won't receive any new push notifications!`\n            );\n        }\n    };\n\n    subscribeUser = async () => {\n        if (this.state.subscription || !this.state.registered_SW) return;\n\n        const existingSubscription = await getExistingSubscription(\n            this.state.registered_SW\n        );\n        if (existingSubscription)\n            return this.setState({\n                subscription: existingSubscription,\n            });\n\n        try {\n            console.log(`No subscription found, adding new subscription!`);\n            const newSubscription =\n                await this.state.registered_SW.pushManager.subscribe({\n                    applicationServerKey: this.state.convertedVapidKey,\n                    userVisibleOnly: true,\n                });\n\n            const res = await pushReqToServer(newSubscription);\n            if (res === true) this.setState({ subscription: newSubscription });\n            else await newSubscription.unsubscribe();\n        } catch (err) {\n            if (Notification.permission !== \"granted\") {\n                alert(\"Notification permission was not granted!\");\n            } else {\n                alert(\"Error ocurred while subscribing :: \", err);\n            }\n        }\n    };\n\n    unsubscribeUser = async () => {\n        if (this.state.subscription) {\n            this.state.subscription.unsubscribe();\n            this.setState({\n                subscription: null,\n            });\n            console.log(\n                `Successfully unsubscribed now you won't receive any new push notifications!`\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <div className=\"buttons\">\n                        <div className=\"button-container\">\n                            <button\n                                type=\"button\"\n                                onClick={this.registerSW}\n                                className=\"register-button\"\n                                disabled={\n                                    this.state.registered_SW ? true : false\n                                }\n                            >\n                                Register service worker\n                            </button>\n                            <button\n                                type=\"button\"\n                                onClick={this.unregisterSW}\n                                className=\"unregister-button\"\n                                disabled={\n                                    this.state.registered_SW ? false : true\n                                }\n                            >\n                                UnRegister service worker\n                            </button>\n                        </div>\n                        <div className=\"button-container\">\n                            <button\n                                type=\"button\"\n                                onClick={this.subscribeUser}\n                                className=\"subscribe-button\"\n                                disabled={\n                                    this.state.subscription ||\n                                    !this.state.registered_SW\n                                        ? true\n                                        : false\n                                }\n                            >\n                                Subscribe to push notifications\n                            </button>\n                            <button\n                                type=\"button\"\n                                onClick={this.unsubscribeUser}\n                                className=\"unsubscribe-button\"\n                                disabled={\n                                    this.state.subscription ? false : true\n                                }\n                            >\n                                UnSubscribe to push notifications\n                            </button>\n                        </div>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}